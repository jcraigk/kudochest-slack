= content_for(:feedback_class) { 'width-full' }

.columns
  .column.is-one-quarter
    .team-setting-link data-link='responses'
      = icon_and_text('comment', t('teams.chat_responses'))

    .team-setting-link data-link='presence'
      = icon_and_text('door-open', t('teams.presence'))

    .team-setting-link data-link='hints'
      = icon_and_text('lightbulb', t('teams.hints'))

    .team-setting-link data-link='giving_points'
      = icon_and_text('hand-holding-seedling', t('teams.giving_points', points_title: App.points_term.titleize))

    .team-setting-link data-link='emoji'
      = icon_and_text('smile', t('teams.emoji'))

    .team-setting-link data-link='throttling'
      = icon_and_text('tachometer', t('teams.throttling'))

    .team-setting-link data-link='streaks'
      = icon_and_text('rabbit-fast', t('teams.giving_streaks'))

    .team-setting-link data-link='schedule'
      = icon_and_text('clock', t('teams.schedule'))

    .team-setting-link data-link='reports'
      = icon_and_text('chart-pie-alt', t('teams.reports'))

    .team-setting-link data-link='leveling'
        = icon_and_text('signal-alt', t('teams.leveling'))

    .team-setting-link data-link='loot'
      = icon_and_text('store', t('teams.loot_shop'))

    .team-setting-link data-link='data'
      = icon_and_text('database', t('teams.data_title'))

    .team-setting-link data-link='reset'
      = icon_and_text('exclamation-circle', t('teams.stat_resets', points_title: App.points_term.titleize))

  .column
    = form_for current_team, local: true do |f|
      = hidden_field_tag :section, session[:section]

      = render partial: 'teams/settings/responses', locals: { f: f }
      = render partial: 'teams/settings/presence', locals: { f: f }
      = render partial: 'teams/settings/hints', locals: { f: f }
      = render partial: 'teams/settings/giving_points', locals: { f: f }
      = render partial: 'teams/settings/emoji', locals: { f: f }
      = render partial: 'teams/settings/throttling', locals: { f: f }
      = render partial: 'teams/settings/streaks', locals: { f: f }
      = render partial: 'teams/settings/schedule', locals: { f: f }
      = render partial: 'teams/settings/reports', locals: { f: f }
      = render partial: 'teams/settings/leveling', locals: { f: f }
      = render partial: 'teams/settings/loot', locals: { f: f }
      = render partial: 'teams/settings/data', locals: { f: f }
      = render partial: 'teams/settings/reset', locals: { f: f }

      .team_edit_footer
        = cancel_changes_button
        = submit_button

= javascript_include_tag 'settings'
= javascript_include_tag 'https://unpkg.com/select-pure@0.6.2/dist/bundle.min.js'

javascript:
  let event = new Event('select-pure-change')
  let select_pure = new SelectPure('#profile-multi-select', {
    multiple: true,
    placeholder: false,
    autocomplete: true,
    icon: 'fa fa-times',
    options: #{{@team_profile_options.to_json}},
    value: #{{@infinite_profile_rids.to_json}},
    onChange: value => {
      this.dispatchEvent(event)
      $('#infinite_profile_rids').val(value.join(':'))
    }
  })

  var dirty = false
  var submitted = false

  window.addEventListener('beforeunload', function(e) {
    if (dirty && !submitted) {
      e.returnValue = 'Are you sure you want to leave?';
    }
  });

  function updateButtons() {
    var saveButton = document.getElementById('btn-save-changes');
    var discardButton = document.getElementById('btn-discard-changes');

    if (dirty) {
      saveButton.classList.add('is-primary');
      discardButton.classList.add('is-danger');
    } else {
      saveButton.classList.remove('is-primary');
      discardButton.classList.remove('is-danger');
    }
  }

  function dirtyForm() {
    dirty = true;
    updateButtons();
  }

  function cleanForm() {
    dirty = false;
    updateButtons();
  }

  window.addEventListener('DOMContentLoaded', function() {
    updateButtons();

    var cards = document.querySelectorAll('.card');
    cards.forEach(function(card) {
      card.style.display = 'none';
    });

    var section = '#{session[:section]}';
    if (section !== '') {
      document.querySelector("[data-section='" + section + "']").style.display = 'block';
      document.querySelector("[data-link='" + section + "']").classList.add('is-active');
    } else {
      document.querySelector('.card:first-child').style.display = 'block';
      document.querySelector('.team-setting-link:first-child').classList.add('is-active');
    }

    var links = document.querySelectorAll('.team-setting-link');
    links.forEach(function(link) {
      link.addEventListener('click', function() {
        cards.forEach(function(card) {
          card.style.display = 'none';
        });
        var links = document.querySelectorAll('.team-setting-link');
        links.forEach(function(innerLink) {
          innerLink.classList.remove('is-active');
        });
        this.classList.add('is-active');
        var sectionName = this.dataset.link;
        document.getElementById('section').value = sectionName;
        var sectionSelector = document.querySelector("[data-section='" + sectionName + "']");
        sectionSelector.style.display = 'block';
      });
    });

    var inputs = document.querySelectorAll('input, select, textarea, button');
    inputs.forEach(function(input) {
      input.addEventListener('change', dirtyForm);
    });

    window.addEventListener('select-pure-change', dirtyForm);

    document.getElementById('btn-discard-changes').addEventListener('click', cleanForm);
    document.getElementById('btn-save-changes').addEventListener('click', function() {
      submitted = true;
    });
  });
